// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif


// -------------- //
// fluxin_compact //
// -------------- //

#define fluxin_compact_wrap_target 0
#define fluxin_compact_wrap 0
#define fluxin_compact_pio_version 0


static const uint16_t fluxin_compact_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1                    
            //     .wrap
    0xe300, //  1: set    pins, 0                [3] 
};

#if !PICO_NO_HARDWARE
static const struct pio_program fluxin_compact_program = {
    .instructions = fluxin_compact_program_instructions,
    .length = 2,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config fluxin_compact_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + fluxin_compact_wrap_target, offset + fluxin_compact_wrap);
    sm_config_set_in_pin_count(&c, 1);
    sm_config_set_in_shift(&c, 0, 1, 32);
    return c;
}

void sm_config_set_clk_ns(pio_sm_config *c, uint time_ns) {
    float f = clock_get_hz(clk_sys) * 1e-9 * time_ns;
    int scaled_clkdiv = (int)roundf(f * 256);
    sm_config_set_clkdiv_int_frac(c, scaled_clkdiv / 256, scaled_clkdiv % 256);
}
static inline void fluxin_compact_program_init(PIO pio, uint sm, uint offset, uint pin, uint bit_time_ns) {
    pio_sm_config c = fluxin_compact_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
      // Configura lo shift a destra e abilita l'autopull dopo 32 bit
    sm_config_set_in_shift(&c, true, true, 32);

    sm_config_set_clk_ns(&c, bit_time_ns);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
  
  
  

#endif

// --------------- //
// fluxout_compact //
// --------------- //

#define fluxout_compact_wrap_target 0
#define fluxout_compact_wrap 0
#define fluxout_compact_pio_version 0

static const uint16_t fluxout_compact_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1                    
            //     .wrap
    0xe300, //  1: set    pins, 0                [3] 
};

#if !PICO_NO_HARDWARE
static const struct pio_program fluxout_compact_program = {
    .instructions = fluxout_compact_program_instructions,
    .length = 2,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config fluxout_compact_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + fluxout_compact_wrap_target, offset + fluxout_compact_wrap);
    sm_config_set_out_pin_count(&c, 1);
    sm_config_set_out_shift(&c, 0, 1, 32);
    return c;
}

/*void sm_config_set_clk_ns(pio_sm_config *c, uint time_ns) {
    float f = clock_get_hz(clk_sys) * 1e-9 * time_ns;
    int scaled_clkdiv = (int)roundf(f * 256);
    sm_config_set_clkdiv_int_frac(c, scaled_clkdiv / 256, scaled_clkdiv % 256);
}*/
static inline void fluxout_compact_program_init(PIO pio, uint sm, uint offset, uint pin, uint bit_time_ns) {
    pio_sm_config c = fluxout_compact_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_clk_ns(&c, bit_time_ns);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ----------- //
// index_pulse //
// ----------- //

#define index_pulse_wrap_target 0
#define index_pulse_wrap 2
#define index_pulse_pio_version 0

static const uint16_t index_pulse_program_instructions[] = {
            //     .wrap_target
    0x90a0, //  0: pull   block           side 1     
    0xa027, //  1: mov    x, osr          side 0     
    0x0042, //  2: jmp    x--, 2          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program index_pulse_program = {
    .instructions = index_pulse_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config index_pulse_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + index_pulse_wrap_target, offset + index_pulse_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void index_pulse_program_init(PIO pio, uint sm, uint offset, uint pin, uint bit_time_ns) {
    pio_sm_config c = index_pulse_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_sideset(&c, 1, /* optional */ false, /* pin direction */ false);
    sm_config_set_clk_ns(&c, bit_time_ns);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, /* is_out */ true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

